// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (name, start_gg_id, tournament_id) VALUES ($1, $2, $3) RETURNING event_id, name, start_gg_id, tournament_id
`

type CreateEventParams struct {
	Name         string
	StartGgID    int32
	TournamentID int32
}

// This query will fail if the tournament_id does not exist
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.Name, arg.StartGgID, arg.TournamentID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.Name,
		&i.StartGgID,
		&i.TournamentID,
	)
	return i, err
}

const createMatch = `-- name: CreateMatch :one
INSERT INTO matches (event_id, start_gg_id) VALUES ($1, $2) RETURNING match_id, event_id, start_gg_id
`

type CreateMatchParams struct {
	EventID   int32
	StartGgID string
}

// This query will fail if the event_id does not exist
// This query will fail if the start_gg_id already exists
func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (Match, error) {
	row := q.db.QueryRowContext(ctx, createMatch, arg.EventID, arg.StartGgID)
	var i Match
	err := row.Scan(&i.MatchID, &i.EventID, &i.StartGgID)
	return i, err
}

const createMatchSlot = `-- name: CreateMatchSlot :one
INSERT INTO match_slot (match_id, player_id, score, win) VALUES ($1, $2, $3, $4) RETURNING match_id, player_id, score, win
`

type CreateMatchSlotParams struct {
	MatchID  int32
	PlayerID int32
	Score    int32
	Win      bool
}

// This query will fail if the match_id does not exist
// This query will fail if the player_id does not exist
// This query will fail if the player_id is already in the match
func (q *Queries) CreateMatchSlot(ctx context.Context, arg CreateMatchSlotParams) (MatchSlot, error) {
	row := q.db.QueryRowContext(ctx, createMatchSlot,
		arg.MatchID,
		arg.PlayerID,
		arg.Score,
		arg.Win,
	)
	var i MatchSlot
	err := row.Scan(
		&i.MatchID,
		&i.PlayerID,
		&i.Score,
		&i.Win,
	)
	return i, err
}

const createPlacement = `-- name: CreatePlacement :one
INSERT INTO placements (event_id, player_id, placement) VALUES ($1, $2, $3) RETURNING event_id, player_id, placement
`

type CreatePlacementParams struct {
	EventID   int32
	PlayerID  int32
	Placement int32
}

// This query will fail if the event_id does not exist
// This query will fail if the player_id does not exist
// This query will fail if the player_id is already in the event
func (q *Queries) CreatePlacement(ctx context.Context, arg CreatePlacementParams) (Placement, error) {
	row := q.db.QueryRowContext(ctx, createPlacement, arg.EventID, arg.PlayerID, arg.Placement)
	var i Placement
	err := row.Scan(&i.EventID, &i.PlayerID, &i.Placement)
	return i, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (name, first_appearance) VALUES ($1, $2) RETURNING player_id, name, first_appearance
`

type CreatePlayerParams struct {
	Name            string
	FirstAppearance time.Time
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Name, arg.FirstAppearance)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.FirstAppearance)
	return i, err
}

const createPlayerAlias = `-- name: CreatePlayerAlias :one
INSERT INTO player_aliases (player_id, start_gg_id) VALUES ($1, $2) RETURNING player_id, start_gg_id
`

type CreatePlayerAliasParams struct {
	PlayerID  int32
	StartGgID int32
}

// This query will fail if the player_id does not exist
func (q *Queries) CreatePlayerAlias(ctx context.Context, arg CreatePlayerAliasParams) (PlayerAlias, error) {
	row := q.db.QueryRowContext(ctx, createPlayerAlias, arg.PlayerID, arg.StartGgID)
	var i PlayerAlias
	err := row.Scan(&i.PlayerID, &i.StartGgID)
	return i, err
}

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (player_id, rating, rd, sigma, date) VALUES ($1, $2, $3, $4, $5)  RETURNING player_id, rating, rd, sigma, date
`

type CreateRatingParams struct {
	PlayerID int32
	Rating   float64
	Rd       float64
	Sigma    float64
	Date     time.Time
}

// This query will fail if the player_id does not exist
// This query will fail if the player_id is already has a rating for that period
func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating,
		arg.PlayerID,
		arg.Rating,
		arg.Rd,
		arg.Sigma,
		arg.Date,
	)
	var i Rating
	err := row.Scan(
		&i.PlayerID,
		&i.Rating,
		&i.Rd,
		&i.Sigma,
		&i.Date,
	)
	return i, err
}

const createTournament = `-- name: CreateTournament :one
INSERT INTO tournaments (name, postcode, end_at, slug)
VALUES ($1, $2, $3, $4)
RETURNING tournament_id, name, postcode, end_at, slug
`

type CreateTournamentParams struct {
	Name     string
	Postcode sql.NullString
	EndAt    time.Time
	Slug     string
}

// This query will fail if the slug already exists
func (q *Queries) CreateTournament(ctx context.Context, arg CreateTournamentParams) (Tournament, error) {
	row := q.db.QueryRowContext(ctx, createTournament,
		arg.Name,
		arg.Postcode,
		arg.EndAt,
		arg.Slug,
	)
	var i Tournament
	err := row.Scan(
		&i.TournamentID,
		&i.Name,
		&i.Postcode,
		&i.EndAt,
		&i.Slug,
	)
	return i, err
}

const getPlayerAliase = `-- name: GetPlayerAliase :one
SELECT player_id, start_gg_id FROM player_aliases WHERE start_gg_id = $1
`

func (q *Queries) GetPlayerAliase(ctx context.Context, startGgID int32) (PlayerAlias, error) {
	row := q.db.QueryRowContext(ctx, getPlayerAliase, startGgID)
	var i PlayerAlias
	err := row.Scan(&i.PlayerID, &i.StartGgID)
	return i, err
}

const getPlayerFromAlias = `-- name: GetPlayerFromAlias :one
SELECT player_id, name, first_appearance FROM players WHERE player_id = (SELECT player_id FROM player_aliases WHERE start_gg_id = $1)
`

// This query will fail if the start_gg_id does not exist
func (q *Queries) GetPlayerFromAlias(ctx context.Context, startGgID int32) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerFromAlias, startGgID)
	var i Player
	err := row.Scan(&i.PlayerID, &i.Name, &i.FirstAppearance)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT player_id, name, first_appearance FROM players
`

func (q *Queries) GetPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(&i.PlayerID, &i.Name, &i.FirstAppearance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
